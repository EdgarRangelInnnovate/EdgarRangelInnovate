# Nombre del workflow, aparecer√° en la pesta√±a 'Actions' de tu repo
name: Deploy Docsify Site to GitHub Pages

# Eventos que disparan este workflow
on:
  push:
    branches: ["main"] # Dispara el workflow en cada push a la rama 'main'

  # Permite ejecutar este workflow manualmente desde la pesta√±a 'Actions'
  workflow_dispatch:

# Permisos requeridos para este workflow
permissions:
  contents: write # Necesario para peaceiris/actions-gh-pages
  pages: write    # Necesario para desplegar en Github Pages
  id-token: write # Necesario apra autenticaci√≥n OIDC con GH Pages

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # El √∫nico job en este workflow, llamado 'deploy'
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # El tipo de m√°quina virtual donde se ejecutar√° el job
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Hacer un checkout del c√≥digo del repositorio
      - name: Checkout
        uses: actions/checkout@v4
        # with:
        #  Permite que el checkout incluya todos los tags del repositorio
        #  fetch-depth: 1 # Esto es necesario para poder crear tags y releases
      # Paso 2: Configurar Node.js para poder leer package.json
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      # Paso 3: Obtener la versi√≥n del proyecto desde package.json
      - name: Get project version from package.json
        id: get_version # Asigna un ID a este paso para referenciar sus outputs
        run: |
          # Verifica si package.json existe en la ra√≠z del repositorio
          if [ -f package.json ]; then
            # Usa 'node -p' para parsear el JSON y extraer la versi√≥n
            PROJECT_VERSION=$(node -p "require('./package.json').version")
          else
            # Si no hay package.json, usa una versi√≥n por defecto (fallback)
            PROJECT_VERSION="0.0.0"
          fi
          # Exporta la versi√≥n como un output del paso para usarla en pasos posteriores
          echo "project_version=$PROJECT_VERSION" >> "$GITHUB_OUTPUT"
      # Paso 4: Obtener la fecha y hora actual del workflow (fecha del build/despliegue)
      - name: Get current workflow timestamp
        id: get_date # Asigna un ID a este paso para referenciar sus outputs
        run: |
          # Obtener la fecha y hora de inicio del job en formato ISO 8601, luego formatear
          # La variable GITHUB_TIMESTAMP contiene la hora en UTC
          # Convertimos a YYYY-MM-DD
          LAST_BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
          echo "last_update=$LAST_BUILD_DATE" >> "$GITHUB_OUTPUT"
      # Paso 5: Generar el archivo version-info.json
      # Este archivo contendr√° la versi√≥n y la fecha obtenida
      - name: Generate version-info.json
        run: |
          # Crea el archivo JSON en la ra√≠z del directorio de trabajo
          echo "{\"version\": \"${{ steps.get_version.outputs.project_version }}\", \"last_update\": \"${{ steps.get_date.outputs.last_update }}\"}" > version-info.json
          # Generar log
          cat version-info.json

      # Paso 6: üè∑Ô∏è Crear y subir el tag si no existe
      - name: Create Git tag for current version
        run: |
          VERSION=${{ steps.get_version.outputs.project_version }}
          TAG="v$VERSION"

          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "Tag $TAG ya existe. No se crear√° nuevamente."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag -a "$TAG" -m "Release $TAG: versi√≥n estable generada autom√°ticamente"
            git push origin "$TAG"
            echo "Tag $TAG creado y subido correctamente."
          fi
      # # Paso 7:üìò Crear una release en GitHub (si el tag fue nuevo)
      # - name: Create GitHub release
      #   if: success()
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     VERSION=${{ steps.get_version.outputs.project_version }}
      #     TAG="v$VERSION"

      #     if gh release view "$TAG" > /dev/null 2>&1; then
      #       echo "La release $TAG ya existe."
      #     else
      #       gh release create "$TAG" \
      #         --title "Versi√≥n $VERSION" \
      #         --notes "Release $TAG: versi√≥n estable generada autom√°ticamente"
      #       echo "Release $TAG creada exitosamente."
      #     fi

      # Paso 7: Configurar GitHub Pages (requerido por actions/deploy-pages)
      - name: Setup Pages
        uses: actions/configure-pages@v5
      # # --- Paso de depuraci√≥n: Listar archivos ANTES de subir el artefacto ---
      # - name: Debug List files in assets/plugins before upload
      #   run: |
      #     echo "Contenido de assets/plugins/ en el runner de GitHub Actions:"
      #     ls -laR assets/plugins/
      #     echo "Verificando presencia de archivos espec√≠ficos:"
      #     find . -type f -name "year-update.js"
      #     find . -type f -name "last-update.js"
      #     echo "--------------------------------------------------------"
      #     echo "Contenido de la ra√≠z del artefacto (ej. para verificar si .nojekyll u otros est√°n all√≠):"
      #     ls -la # Para ver el contenido del directorio '.' que se sube
      # Paso 8: Subir el artefacto de la p√°gina (tu repositorio entero)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      # Paso 9: Desplegar el artefacto en GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
